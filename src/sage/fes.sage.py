

# This file was *autogenerated* from the file fes.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_10 = Integer(10); _sage_const_5 = Integer(5)
import math
from random import randint

def run_fes(f_sys, n):
  for f in f_sys: # Should be changed to the "clamped" version
    s = init(f, n)
    while s["i"] < _sage_const_2 **n:
      next(s)
      if s["y"] == _sage_const_0 :
        return s["y"]

def next(s):
  s["i"] += _sage_const_1 
  k1 = BIT1(s["i"])
  k2 = BIT2(s["i"])
  if math.log2(s["i"]).is_integer():
    s["deriv1"][k1] = (s["deriv1"][k1] + s["deriv2"][k1][k2])
  s["y"] = (s["y"] + s["deriv1"][k1])

def init(f, n):
  s = dict()
  s["i"] = _sage_const_0 
  s["x"] = _sage_const_0 
  s["y"] = f.constant_coefficient()
  s["deriv2"] = dict()
  for k in range(_sage_const_1 , n):
    s["deriv2"][k] = dict()
    for j in range(k):
      s["deriv2"][k][j] = _sage_const_1  #f.derivative(f.variables()[k], f.variables()[j])
  s["deriv1"] = dict()
  s["deriv1"][_sage_const_0 ] = f.coefficient({v: (_sage_const_1  if i == _sage_const_0  else _sage_const_0 ) for i, v in enumerate(f.variables())})
  for k in range(_sage_const_1 , n):
    print(k)
    s["deriv1"][k] = s["deriv2"][k][k-_sage_const_1 ] + f.coefficient({v: (_sage_const_1  if i == k else _sage_const_0 ) for i, v in enumerate(f.variables())})
  return s


def BIT1(i):
  for idx, c in enumerate(reversed(bin(i ** (i >> _sage_const_1 ))[_sage_const_2 :])):
    if c == _sage_const_1 : return idx

def BIT2(i):
  return len(bin(i ** (i >> _sage_const_1 ))[_sage_const_2 :]) - _sage_const_1 

def main():
  for _ in range(_sage_const_10 ):
    m = randint(_sage_const_5 , _sage_const_10 )
    n = randint(_sage_const_2 , _sage_const_5 )
    R = GF(_sage_const_2 )[", ".join(["x" + str(i) for i in range(n)])]
    f_sys = []
    for i in range(m):
      f_sys.append(R(GF(_sage_const_2 )[R.gens()].random_element(degree=_sage_const_2 )))
    run_fes(f_sys, n)

if __name__ == "__main__":
  main() 

