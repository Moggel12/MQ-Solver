

# This file was *autogenerated* from the file dinur.sage
from sage.all_cmdline import *   # import sage library

_sage_const_5 = Integer(5); _sage_const_10 = Integer(10); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_5p4 = RealNumber('5.4'); _sage_const_100 = Integer(100)
from mob import mob_transform
from fes import bruteforce
import numpy as np
from random import randint
from utils import index_of, convert
from math import ceil

# For testing purposes
_m_low = _sage_const_5 
_m_high = _sage_const_10 
_n_low = _sage_const_2 
_n_high = _sage_const_10 

def random_system():
    system = []
    m = randint(_m_low, _m_high)
    n = randint(_n_low, _n_high)
    R = GF(_sage_const_2 )[", ".join(["x" + str(i) for i in range(n)])]
    rem = _sage_const_0 
    for _ in range(m):
        f = R(GF(_sage_const_2 )[R.gens()].random_element(degree=_sage_const_2 , terms=Infinity))
        if (f != GF(_sage_const_2 )(_sage_const_0 )) and (f != GF(_sage_const_2 )(_sage_const_1 )):
            system.append(f)
        else:
            rem += _sage_const_1 
    m -= rem
    n1 = randint(_sage_const_1 , n - _sage_const_1 )
    return system, n, m, n1, R

def random_system_with_sol():
    system, n, _, _, R = random_system()
    sol = randint(_sage_const_0 , _sage_const_2 **n - _sage_const_1 ) 
    system = [f if f(*convert(sol, n)) == _sage_const_0  else (f + _sage_const_1 ) for f in system]
    return system, sol, R, n

def test_u_values(trials, verbose=False):
    for _ in range(trials):
        system, n, m, n1, ring = random_system() 
        F_tilde = product((GF(_sage_const_2 )(_sage_const_1 ) + f) for f in system)
        w = F_tilde.degree() - n1
        if verbose:
            print(f"Checking system\n{system}\n{(n, m, n1, w)}")
        V, ZV = compute_u_values(system, R, n1, w)
        for y in range(_sage_const_2 **(n - n1)):
            s0 = sum(F_tilde(*convert(y, n - n1), *convert(z_hat, n1)) for z_hat in range(_sage_const_2 **n1))
            if V[y] != s0:
                print(f"Error found in V[{y}]\n\t{V[y]}\n\t{s0}")
                return y
            for i in range(n1):
                si = sum(F_tilde(*convert(y, n - n1), *convert(z_hat, n1 - _sage_const_1 )[:i], _sage_const_0 , *convert(z_hat, n1 - _sage_const_1 )[i:]) for z_hat in range(_sage_const_2 **(n1 - _sage_const_1 )))
                if ZV[i][y] != si:
                    print(f"Error found in ZV[{i}][{y}]\n\t{ZV[i][y]}\n\t{si}")
                    return y
        if verbose: 
            print("No errors found for system")
    print(f"No errors found in {trials} trial(s)")

def test_output_sol(trials, verbose=False):
    for _ in range(trials):
        system, n, m, n1, R = random_system()
        F_tilde = product((GF(_sage_const_2 )(_sage_const_1 ) + f) for f in system)
        w = F_tilde.degree() - n1
        if verbose:
            print(f"Checking system\n{system}\n{(n, m, n1, w)}")
        potentials = output_potentials(system, R, n1, w)
        for y in range(_sage_const_2 **(n - n1)):
            s0 = sum(F_tilde(*convert(y, n - n1), *convert(z_hat, n1)) for z_hat in range(_sage_const_2 **n1))
            if s0 == GF(_sage_const_2 )(_sage_const_1 ):
                if y not in potentials:
                    print(f"Error in out: {y} is not a key")
                    return y
                if potentials[y][_sage_const_0 ] != GF(_sage_const_2 )(_sage_const_1 ):
                    print(f"Error in out[{y}][0]: Not equal to 1 when sum evaluates to 1")
                    return y
                for i in range(_sage_const_1 , n1 + _sage_const_1 ):
                    si = sum(F_tilde(*convert(y, n - n1), *convert(z_hat, n1 - _sage_const_1 )[:i - _sage_const_1 ], _sage_const_0 , *convert(z_hat, n1 - _sage_const_1 )[i - _sage_const_1 :]) for z_hat in range(_sage_const_2 **(n1 - _sage_const_1 )))
                    if potentials[y][i] == si:
                        print(f"Error in out[{y}][{i}]: Value NOT inverse of the evaluation of U_{i}({y}) = {si} = {potentials[y][i]}")
                        return y
        if verbose:
            print("No errors found for system")
    print(f"No errors found in {trials} trial(s)")

def dry_run_solve(trials):
    for _ in range(trials):
        print("\n===")
        system, known_sol, R, n = random_system_with_sol()
        print("Verify known solution:", [f(*convert(known_sol, n)) for f in system]) # Yes, I trust myself this "much"
        print("Known solution:", known_sol)
        print("System:", system, R)
        sol = solve(system, R)
        print("Solution found:", sol)
        print("Verify found solution:", [f(*sol) for f in system])

def compute_u_values(system, R, n1, w):
    n = len(R.gens())
    sols = bruteforce(system, R, n1, w + _sage_const_1 )
    l = [math.comb(n - n1, i) for i in range(w + _sage_const_2 )]
    V = {i: GF(_sage_const_2 )(_sage_const_0 ) for i in range(sum(l[:-_sage_const_1 ]))}
    ZV = {i: {j: GF(_sage_const_2 )(_sage_const_0 ) for j in range(sum(l))} for i in range(n1)}
    for s in sols:
        y, z = s[:n - n1], s[n - n1:]
        if sum(y) <= w:
            idx = index_of(y)
            V[idx] += _sage_const_1 
        for i in range(n1):
            if z[i] == _sage_const_0 :
                idx = index_of(y)
                ZV[i][idx] += _sage_const_1 
    return V, ZV

def output_potentials(system, R, n1, w):
    n = len(R.gens())
    R_sub = GF(_sage_const_2 )[", ".join([str(var) for var in R.gens()[:n - n1]])]
    V, ZV = compute_u_values(system, R, n1, w + _sage_const_1 )
    U = np.full(n1 + _sage_const_1 , GF(_sage_const_2 )(_sage_const_0 ))
    U[_sage_const_0 ] = mob_transform(V, R_sub.gens())
    for i in range(_sage_const_1 , n1 + _sage_const_1 ):
        U[i] = mob_transform(ZV[i - _sage_const_1 ], R_sub.gens())
    evals = np.full((n1 + _sage_const_1 , _sage_const_2 **(n - n1)), GF(_sage_const_2 )(_sage_const_0 ))
    for i in range(n1 + _sage_const_1 ):
        for y in range(_sage_const_2 **(n - n1)):
            evals[i][y] = U[i](*convert(y, n - n1))
    out = np.full((_sage_const_2 **(n - n1), n1 + _sage_const_1 ), GF(_sage_const_2 )(_sage_const_0 ))
    for y_hat in range(_sage_const_2 **(n - n1)):
        if evals[_sage_const_0 ][y_hat] == _sage_const_1 :
            out[y_hat][_sage_const_0 ] = GF(_sage_const_2 )(_sage_const_1 )
            for i in range(_sage_const_1 , n1 + _sage_const_1 ):
                out[y_hat][i] = evals[i][y_hat] + _sage_const_1 
    return out

def test_solution(system, sol):
    return not any(f(*sol) for f in system)

def preprocess(system, R):
    new_sys = []
    for f in system:
        for v in R.gens():
            if v**_sage_const_2  in f:
                f = f + v**_sage_const_2  + v
        new_sys.append(f)
    return new_sys

@profile
def solve(system, R):
    system = preprocess(system, R)
    n = len(R.gens())
    n1 = int(ceil(n/(_sage_const_5p4 ))) # Quadratic systems are assumed here, see page 19 of full dinur paper for explanation
    l = n1 + _sage_const_1 
    m = len(system)
    potentials_solutions = []
    k = _sage_const_0 
    while True:
        print("Commencing round", k)
        A = np.rint(np.random.rand(l, m))
        E_k = [sum(GF(_sage_const_2 )(A[i][j]) * system[j] for j in range(m)) for i in range(l)]
        w = product((_sage_const_1  + f) for f in system).degree() - n1 # Do this differently
        curr_potential_sol = output_potentials(system, R, n1, w)
        potentials_solutions.append(curr_potential_sol)
        for y_hat in range(_sage_const_2 **(n - n1)):
            if curr_potential_sol[y_hat][_sage_const_0 ] == _sage_const_1 :
                for k1 in range(k):
                    if all(curr_potential_sol[y_hat] == potentials_solutions[k1][y_hat]):
                        sol = convert(y_hat, n - n1) + list(curr_potential_sol[y_hat][_sage_const_1 :])
                        if test_solution(system, sol):
                            return sol
                        break
        k += _sage_const_1 

def main():
    # test_u_values(1, False)
    # test_output_sol(20, False)
    dry_run_solve(_sage_const_100 )

if __name__ == "__main__":
    main()

