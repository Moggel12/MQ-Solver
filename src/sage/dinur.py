

# This file was *autogenerated* from the file fes.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_100 = Integer(100); _sage_const_5 = Integer(5); _sage_const_10 = Integer(10)
import math
# from random import randint
import numpy as np
from itertools import combinations_with_replacement as cwr

def run_fes(f_sys, vars, inc):
    solutions = []
    n = len(vars)
    s = init(f_sys, vars)
    if (s["y"] == _sage_const_0 ).all():
        solutions.append(_sage_const_0 )
    while s["i"] < _sage_const_2 **n - _sage_const_1 :
        s = next(s, inc)
        if (s["y"] == _sage_const_0 ).all():
            solutions.append(gray_code(s["i"]))
    return solutions

def next(s, inc):
    #s["i"] = s["i"] + 1
    k1 = bit1(s["i"])
    k2 = bit2(s["i"])
    if k2 > -_sage_const_1 :
        s["d1"][:,k1] = (s["d1"][:,k1] + s["d2"][:,k1,k2])
    s["y"] = (s["y"] + s["d1"][:,k1])
    return s

def init(f, vars):
    n = len(vars)
    s = dict()
    s["i"] = _sage_const_0 
    s["y"] = f[_sage_const_0 ].copy()
    s["d2"] = np.full((len(f[_sage_const_0 ]), n, n), GF(_sage_const_2 )(_sage_const_0 ))
    id = [(k, j) for (k,j) in cwr(range(n), _sage_const_2 )]
    for i, (k, j) in enumerate(id):
        if k == j: continue
        s["d2"][:,k,j] = f[i + len(vars) + _sage_const_1 , :]
    s["d1"] = np.full((len(f[_sage_const_0 ]), n), GF(_sage_const_2 )(_sage_const_0 ))
    s["d1"][:,_sage_const_0 ] = f[_sage_const_1 ,:]
    for k in range(_sage_const_1 , n):
        s["d1"][:,k] = s["d2"][:,k-_sage_const_1 ,k] + f[k + _sage_const_1 ,:]
    return s

def slice(f_sys, vars, m):
    f_sys_sliced = np.full((math.comb(len(vars) + _sage_const_2  - _sage_const_1 , _sage_const_2 ) + len(vars) + _sage_const_1 , m), GF(_sage_const_2 )(_sage_const_0 ))
    for j, poly in enumerate(f_sys):
        i = _sage_const_0 
        f_sys_sliced[i, j] = poly.constant_coefficient()
        i += _sage_const_1 
        for v in vars:
            f_sys_sliced[i,j] = poly.coefficient({v_: _sage_const_1  if v == v_ else _sage_const_0  for v_ in vars})
            i += _sage_const_1 
        for v1, v2 in cwr(range(len(vars)), _sage_const_2 ):
            if v1 == v2:
                f_sys_sliced[i, j] = poly.coefficient({vars[v1]: _sage_const_2 , **{v: _sage_const_0  for v in vars if v != vars[v1]}})
            else:
                f_sys_sliced[i, j] = poly.coefficient({vars[v1]: _sage_const_1 , vars[v2]: _sage_const_1 , **{v: _sage_const_0  for v in vars if v != vars[v1] and v != vars[v2]}})
            i += _sage_const_1 
    return f_sys_sliced

def bit1(i):
    return int(math.log2(i & (-i)))

def bit2(i):
    if math.log2(i).is_integer(): return -_sage_const_1 
    i &= (i - _sage_const_1 )
    i &= (-_sage_const_1 )
    return int(bit1(i))

def subspace_gen(n, n1, w):
    for g in monotonic_bounded(n - n1, w + _sage_const_1 ): 
        for i in range(_sage_const_2 **n1):
            yield g + convert(i, n1)

def convert(v, n):
    v = bin(v)[_sage_const_2 :]
    return tuple(map(lambda i : (int(v[-i]) if i <= len(v) else _sage_const_0 ), range(_sage_const_1 , n + _sage_const_1 )))

def gray_code(i): return i ^ (i >> _sage_const_1 )

def test_solutions(f_sys, sol, R):
    for s in range(_sage_const_2 **len(R.gens())):
        faulted_sol = False
        for f in f_sys:
            args = convert_in(s, len(R.gens()))
            res = f(*args) 
            faulted_sol = faulted_sol or res
            if res and (s in sol):
                print("=== Case 1 ===")
                print(R.gens())
                print(f)
                print(args)
                print(res)
                print(s)
                print("===")
                return False
        if (not faulted_sol) and (s not in sol):
            print("=== Case 2 ===")
            print(R.gens())
            print(convert(s, len(R.gens())))
            print(s)
            print([f(*convert(s, len(R.gens()))) for f in f_sys])
            print("===")
            return False
    return True

def bruteforce(system, R, n, d, inc):
    return [convert(s, R.gens()) for s in run_fes(system, R.gens(), inc)]

def preprocess(f_sys, vars):
    for i, f in enumerate(f_sys):
        for x in f.variables():
            coeff = f.coefficient({x:_sage_const_2 })
            if coeff == _sage_const_1 :
                f_sys[i] += x
    return f_sys


def main():
    res = True
    for i in range(_sage_const_100 ):
        f_sys = []
        m = randint(_sage_const_5 , _sage_const_10 )
        n = randint(_sage_const_2 , _sage_const_5 )
        R = GF(_sage_const_2 )[", ".join(["x" + str(i) for i in range(n)])]
        for _ in range(m):
            f = R(GF(_sage_const_2 )[R.gens()].random_element(degree=_sage_const_2 ))
            f_sys.append(f)
        f_sys_prep = preprocess(f_sys.copy(), R.gens())
        m = len(f_sys) 
        f_sys_sl = slice(f_sys_prep, R.gens(), m)
        sol = run_fes(f_sys_sl, R.gens(), lambda x: x+_sage_const_1 )
        res = test_solutions(f_sys, sol, R)
        if not res:
            print(f_sys_prep)
            print(f_sys)
            print(f_sys_sl)
            print(sol)
            print(res)
            break
    if res:
        print("No errors found for 100 trials")

if __name__ == "__main__":
    main() 

