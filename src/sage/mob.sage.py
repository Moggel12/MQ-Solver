

# This file was *autogenerated* from the file mob.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_10 = Integer(10)
from random import randint
from itertools import product
from utils import index_of

def mob_transform(sol, vars, degree=Infinity):
  f = _f_expand(_sage_const_0 , vars, sol, _sage_const_0 , degree)

  # How can we avoid the high terms appearing during _f_expand?
  for m in f.monomials():
    if m.degree() > degree:
      f += m

  return f

def _f_expand(lvl, vars, sol, weight, degree):
    alt = lambda val : [val if lvl == idx else e for idx, e in enumerate(vars)]

    if weight > degree:
      return _sage_const_0 

    if lvl == len(vars):
        idx = index_of(vars)
        return sol[idx]
    else:
        tmp0 = _f_expand(lvl + _sage_const_1 , alt(_sage_const_0 ), sol, weight, degree)
        tmp1 = _f_expand(lvl + _sage_const_1 , alt(_sage_const_1 ), sol, weight+_sage_const_1 , degree)

        f1 = tmp0 + tmp1
        f2 = tmp0

        return vars[lvl] * f1 + f2

def mob_inv(poly):
    sol = dict()
    for idx, bits in enumerate(product([GF(_sage_const_2 )(_sage_const_0 ), GF(_sage_const_2 )(_sage_const_1 )], repeat=len(poly.args()))):
        sol[idx] = poly(*(bits[::-_sage_const_1 ]))
    return sol

def random_poly_GF2(R, degree):
    return R(GF(_sage_const_2 )[R.gens()].random_element(degree=degree, terms=Infinity))

def test_mob():
    for _ in range(_sage_const_10 ):
        num_vars = randint(_sage_const_2 ,_sage_const_10 )
        degree = _sage_const_2 

        R = GF(_sage_const_2 )[", ".join(["x" + str(i) for i in range(num_vars)])]

        p = random_poly_GF2(R, degree)

        # degree-2 only
        for v in R.gens():
          if v**_sage_const_2  in p.monomials():
            p = p + v**_sage_const_2  + v

        sol = mob_inv(p)
        p_anf = mob_transform(sol, R.gens(), degree)
        p_anf_sol = mob_inv(p_anf)
        if p != p_anf:
            print(f"p{p.args()} =", p)
            print(f"p_anf{p_anf.args()} =", p_anf)
            print(sol)
            print(p_anf_sol)
            break
        else:
          print("ok!")
    print("Testing done")

def main():
    test_mob()

if __name__ == "__main__":
    main()

