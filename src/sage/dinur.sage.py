

# This file was *autogenerated* from the file dinur.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
from mob import mob_transform
from fes import bruteforce
from math import comb
import numpy as np
from monotonic_gray import monotonic_bounded

def index_of(y_list):
    return sum([b * _sage_const_2 **i for i, b in enumerate(y_list)])

def compute_u_values(system, n, n1, w):
    sols = bruteforce(system, R, n - n1, w + _sage_const_1 )
    l = [math.comb(n - n1, i) for i in range(w + _sage_const_2 )]
    V = {i: GF(_sage_const_2 )(_sage_const_0 ) for i in range(sum(l[:-_sage_const_1 ]))}
    ZV = {i: {j: GF(_sage_const_2 )(_sage_const_0 ) for j in range(sum(l))}  for i in range(n1)}
    for s in sols:
        y,z = sols[:n-n1], sols[n - n1:]
        idx = index_of(y)
        if sum(y) <= w:
            V[idx] += _sage_const_1 
        for i in range(n1):
            if z[i] == _sage_const_0 :
                ZV[i - _sage_const_1 ][idx] += _sage_const_1  # NOTICE: zero-indexing => i - 1 (reminder for future bugs)
    return V, ZV

def output_potentials():
    pass

def solve():
    pass

def test_u_values(system, n, n1, w): # Slow and methodical wins the race
    F_tilde = product((f + GF(_sage_const_2 )(_sage_const_1 )) for f in system)
    V, ZV = compute_u_values(system, n, n1, w)
    for inp in prod([_sage_const_0 ,_sage_const_1 ], repeat=n):
        y,z = inp[:n-n1], inp[n - n1:]
        idx = index_of(y)
        if V[idx] != sum(F_tilde(*y, *z_hat) for z_hat in prod([_sage_const_0 ,_sage_const_1 ], repeat=n1)):
            return y
        for i in range(n1):
            if ZV[i][idx] != sum(F_tilde(*y, *(z_hat[:i]), _sage_const_0 , *(z_hat[i:])) for z_hat in prod[_sage_const_0 ,_sage_const_1 ], repeat=n1-_sage_const_1 ):
                return y
    

def main():
    pass

if __name__ == "__main__":
    pass

