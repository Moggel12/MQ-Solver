

# This file was *autogenerated* from the file dinur.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_5 = Integer(5); _sage_const_10 = Integer(10); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_100 = Integer(100)
from mob import mob_transform
from fes import bruteforce, convert
import numpy as np
from random import randint
# from monotonic_gray import monotonic_bounded

def index_of(y_list):
    return sum(b * _sage_const_2 **i for i, b in enumerate(y_list))

def test_u_values(trials, verbose=False):
    for _ in range(trials):
        system = []
        m = randint(_sage_const_5 , _sage_const_10 )
        n = randint(_sage_const_2 , _sage_const_10 )
        R = GF(_sage_const_2 )[", ".join(["x" + str(i) for i in range(n)])]
        rem = _sage_const_0 
        for _ in range(m):
            f = R(GF(_sage_const_2 )[R.gens()].random_element(degree=_sage_const_2 ))
            if (f != GF(_sage_const_2 )(_sage_const_0 )) and (f != GF(_sage_const_2 )(_sage_const_1 )):
                system.append(f)
            else:
                rem += _sage_const_1 
        m -= rem
        n1 = randint(_sage_const_1 , n - _sage_const_1 )
        F_tilde = product((GF(_sage_const_2 )(_sage_const_1 ) + f) for f in system)
        w = F_tilde.degree() - n1
        if verbose:
            print(f"Checking system\n{system}\n{(n, m, n1, w)}")
        V, ZV = compute_u_values(system, R, n1, w)
        for y in range(_sage_const_2 **(n - n1)):
            if V[y] != sum(F_tilde(*convert(y, n - n1), *convert(z_hat, n1)) for z_hat in range(_sage_const_2 **n1)):
                print(f"Error found in V[{y}]\n\t{V[y]}\n\t{sum(F_tilde(*convert(y, n - n1), *convert(z_hat, n1)) for z_hat in range(_sage_const_2 **n1))}")
                return y
            for i in range(n1):
                if ZV[i][y] != sum(F_tilde(*convert(y, n - n1), *convert(z_hat, n1 - _sage_const_1 )[:i], _sage_const_0 , *convert(z_hat, n1 - _sage_const_1 )[i:]) for z_hat in range(_sage_const_2 **(n1 - _sage_const_1 ))):
                    print(f"Error found in ZV[{i}][{y}]\n\t{ZV[i][y]}\n\t{sum(F_tilde(*convert(y, n - n1), *convert(z_hat, n1 - _sage_const_1 )[:i], _sage_const_0 , *convert(z_hat, n1 - _sage_const_1 )[i:]) for z_hat in range(_sage_const_2 **(n1 - _sage_const_1 )))}")
                    return y
        if verbose: 
            print("No errors found for system")
    print(f"No errors found in {trials} trials")

def test_output_sol():
    pass

def compute_u_values(system, R, n1, w):
    n = len(R.gens())
    sols = bruteforce(system, R, n1, w + _sage_const_1 )
    l = [math.comb(n - n1, i) for i in range(w + _sage_const_2 )]
    V = {i: GF(_sage_const_2 )(_sage_const_0 ) for i in range(sum(l[:-_sage_const_1 ]))}
    ZV = {i: {j: GF(_sage_const_2 )(_sage_const_0 ) for j in range(sum(l))} for i in range(n1)}
    for s in sols:
        y,z = s[:n - n1], s[n - n1:]
        if sum(y) <= w:
            idx = index_of(y)
            V[idx] += _sage_const_1 
        for i in range(n1):
            if z[i] == _sage_const_0 :
                idx = index_of(y)
                ZV[i][idx] += _sage_const_1 
    return V, ZV

def output_potentials(system, R, n1, w):
    V, ZV = compute_u_values(system, n, n1, w + _sage_const_1 )
    U = np.full(n1 + _sage_const_1 , GF(_sage_const_2 )(_sage_const_0 ))
    U[_sage_const_0 ] = mob_transform(V, R.gens()[:n - n1])
    for i in range(_sage_const_1 , n1 + _sage_const_1 ):
        U[i] = mob_transform(ZV[i], R.gens()[:n - n1])
    evals = np.full((n1 + _sage_const_1 , _sage_const_2 **(n - n1)), GF(_sage_const_2 )(_sage_const_0 ))
    for i in range(n1 + _sage_const_1 ):
        for y in range(_sage_const_2 **(n - n1)):
            evals[i][y] = U[i](*convert(y, n1))
    out = np.full((_sage_const_2 **(n - n1), n1 + _sage_const_1 ), GF(_sage_const_2 )(_sage_const_0 ))
    for y_hat in range(_sage_const_2 **(n - n1)):
        if evals[_sage_const_0 ][y_hat] == _sage_const_1 :
            out[y_hat][_sage_const_0 ] = GF(_sage_const_2 )(_sage_const_1 )
            for i in range(_sage_const_1 , n1 + _sage_const_1 ):
                out[y][i] = evals[i][y] + _sage_const_1 
    return out

def solve():
    pass

def main():
    pass

if __name__ == "__main__":
    test_u_values(_sage_const_100 )

