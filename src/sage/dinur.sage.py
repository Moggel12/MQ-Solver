

# This file was *autogenerated* from the file dinur.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
from mob import mob_transform
from fes import bruteforce, convert
import numpy as np
# from monotonic_gray import monotonic_bounded

def index_of(y_list):
    return sum(b * _sage_const_2 **i for i, b in enumerate(y_list))

def compute_u_values(system, n, n1, w):
    sols = bruteforce(system, R, n - n1, w + _sage_const_1 )
    l = [math.comb(n - n1, i) for i in range(w + _sage_const_2 )]
    V = {i: GF(_sage_const_2 )(_sage_const_0 ) for i in range(sum(l[:-_sage_const_1 ]))}
    ZV = {i: {j: GF(_sage_const_2 )(_sage_const_0 ) for j in range(sum(l))}  for i in range(n1)}
    for s in sols:
        y,z = sols[:n-n1], sols[n - n1:]
        if sum(y) <= w:
            idx = index_of(y)
            V[idx] += _sage_const_1 
        for i in range(_sage_const_1 , n1 + _sage_const_1 ):
            if z[i] == _sage_const_0 :
                idx = index_of(y)
                ZV[i - _sage_const_1 ][idx] += _sage_const_1 
    return V, ZV

def output_potentials(system, R, n1, w):
    V, ZV = compute_u_values(system, n, n1, w + _sage_const_1 )
    U = np.full(n1 + _sage_const_1 , GF(_sage_const_2 )(_sage_const_0 ))
    U[_sage_const_0 ] = mob_transform(V, R.gens()[:n - n1])
    for i in range(_sage_const_1 , n1 + _sage_const_1 ):
        U[i] = mob_transform(ZV[i], R.gens()[:n - n1])
    evals = np.full((n1 + _sage_const_1 , _sage_const_2 **(n - n1)), GF(_sage_const_2 )(_sage_const_0 ))
    for i in range(n1 + _sage_const_1 ):
        for y in range(_sage_const_2 **(n - n1)):
            evals[i][y] = U[i](*convert(y, n1))
    out = np.full((_sage_const_2 **(n - n1), n1 + _sage_const_1 ), GF(_sage_const_2 )(_sage_const_0 ))
    for y_hat in range(_sage_const_2 **(n - n1)):
        if evals[_sage_const_0 ][y_hat] == _sage_const_1 :
            out[y_hat][_sage_const_0 ] = GF(_sage_const_2 )(_sage_const_1 )
            for i in range(_sage_const_1 , n1 + _sage_const_1 ):
                out[y][i] = evals[i][y] + _sage_const_1 
    return out

def solve():
    pass

def test_u_values(system, n1):
    pass

def main():
    pass

if __name__ == "__main__":
    pass

